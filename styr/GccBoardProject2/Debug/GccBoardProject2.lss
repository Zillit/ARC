
GccBoardProject2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000016  00800100  00800100  00000318  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000276  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000018f  00000000  00000000  0000060e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000519  00000000  00000000  0000079d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  00000cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000fca6  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000160  00000000  00000000  00010a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00010b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00000303  00000000  00000000  00010bde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	ae c0       	rjmp	.+348    	; 0x1a6 <__vector_18>
  4a:	00 00       	nop
  4c:	c0 c0       	rjmp	.+384    	; 0x1ce <__vector_19>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 31       	cpi	r26, 0x16	; 22
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	c5 d0       	rcall	.+394    	; 0x234 <main>
  aa:	fa c0       	rjmp	.+500    	; 0x2a0 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <init_pwm>:
int speed;
int turnTot = 0;
int speedTot = 0;

void init_pwm() {
	DDRD |= 0xFF; //Alla D (PWM)
  ae:	8a b1       	in	r24, 0x0a	; 10
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	8a b9       	out	0x0a, r24	; 10
	TCCR1A |= 1<<COM1A1 | 1<<COM1B1; //| 1<<COM1A0 | 1<<COM1B0;
  b4:	e0 e8       	ldi	r30, 0x80	; 128
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 6a       	ori	r24, 0xA0	; 160
  bc:	80 83       	st	Z, r24
	TCCR1B |= 1<<WGM13 | 1<<CS11;
  be:	e1 e8       	ldi	r30, 0x81	; 129
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	82 61       	ori	r24, 0x12	; 18
  c6:	80 83       	st	Z, r24
	TCCR1C |= 1<<WGM22 | 1<<CS11;
  c8:	e2 e8       	ldi	r30, 0x82	; 130
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	8a 60       	ori	r24, 0x0A	; 10
  d0:	80 83       	st	Z, r24
	ICR1 = 20000/2;
  d2:	80 e1       	ldi	r24, 0x10	; 16
  d4:	97 e2       	ldi	r25, 0x27	; 39
  d6:	90 93 87 00 	sts	0x0087, r25
  da:	80 93 86 00 	sts	0x0086, r24
	OCR1A =  1500/2;
  de:	8e ee       	ldi	r24, 0xEE	; 238
  e0:	92 e0       	ldi	r25, 0x02	; 2
  e2:	90 93 89 00 	sts	0x0089, r25
  e6:	80 93 88 00 	sts	0x0088, r24
	OCR1B =  1500/2; //lek
  ea:	90 93 8b 00 	sts	0x008B, r25
  ee:	80 93 8a 00 	sts	0x008A, r24
	OCR2A = 200000;
  f2:	80 e4       	ldi	r24, 0x40	; 64
  f4:	80 93 b3 00 	sts	0x00B3, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	81 e1       	ldi	r24, 0x11	; 17
  fc:	9a e7       	ldi	r25, 0x7A	; 122
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <init_pwm+0x50>
 106:	00 c0       	rjmp	.+0      	; 0x108 <init_pwm+0x5a>
 108:	00 00       	nop
	_delay_ms(5000);
	
	//Initialize timers 0 and 1 for timed interrupts
	
	//Set timer value to 0
	TCNT3=0x00;
 10a:	10 92 95 00 	sts	0x0095, r1
 10e:	10 92 94 00 	sts	0x0094, r1
 112:	08 95       	ret

00000114 <turn>:
}


void turn(int degrees)
{
	if (degrees <= 20 && degrees >= -20){
 114:	9c 01       	movw	r18, r24
 116:	2c 5e       	subi	r18, 0xEC	; 236
 118:	3f 4f       	sbci	r19, 0xFF	; 255
 11a:	29 32       	cpi	r18, 0x29	; 41
 11c:	31 05       	cpc	r19, r1
 11e:	d8 f4       	brcc	.+54     	; 0x156 <turn+0x42>
		OCR1B = (1500 - degrees*500/22)/2;
 120:	44 ef       	ldi	r20, 0xF4	; 244
 122:	51 e0       	ldi	r21, 0x01	; 1
 124:	84 9f       	mul	r24, r20
 126:	90 01       	movw	r18, r0
 128:	85 9f       	mul	r24, r21
 12a:	30 0d       	add	r19, r0
 12c:	94 9f       	mul	r25, r20
 12e:	30 0d       	add	r19, r0
 130:	11 24       	eor	r1, r1
 132:	c9 01       	movw	r24, r18
 134:	66 e1       	ldi	r22, 0x16	; 22
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	8c d0       	rcall	.+280    	; 0x252 <__divmodhi4>
 13a:	2c ed       	ldi	r18, 0xDC	; 220
 13c:	35 e0       	ldi	r19, 0x05	; 5
 13e:	26 1b       	sub	r18, r22
 140:	37 0b       	sbc	r19, r23
 142:	c9 01       	movw	r24, r18
 144:	99 23       	and	r25, r25
 146:	0c f4       	brge	.+2      	; 0x14a <turn+0x36>
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	95 95       	asr	r25
 14c:	87 95       	ror	r24
 14e:	90 93 8b 00 	sts	0x008B, r25
 152:	80 93 8a 00 	sts	0x008A, r24
	}
	TCNT3=0x00;
 156:	10 92 95 00 	sts	0x0095, r1
 15a:	10 92 94 00 	sts	0x0094, r1
 15e:	08 95       	ret

00000160 <SPI_SlaveInterruptInit>:


void SPI_SlaveInterruptInit(void) // For Interrupted SPI
{	
	// PORTB = 00001000
	DDR_SPI = (1<<DD_MISO);
 160:	80 e4       	ldi	r24, 0x40	; 64
 162:	84 b9       	out	0x04, r24	; 4
	// set SPI enable, spi clock polarity ,  spi interrupts enable
	SPCR = (1<<SPE)|(0<<CPOL)|(1<<SPIE);
 164:	80 ec       	ldi	r24, 0xC0	; 192
 166:	8c bd       	out	0x2c, r24	; 44
 168:	08 95       	ret

0000016a <forward>:
}

void forward(int speed){
	if(speed >= 0 && speed <= 30)
 16a:	8f 31       	cpi	r24, 0x1F	; 31
 16c:	91 05       	cpc	r25, r1
 16e:	b0 f4       	brcc	.+44     	; 0x19c <forward+0x32>
	OCR1A =  (1500 + speed*12)/2;
 170:	9c 01       	movw	r18, r24
 172:	22 0f       	add	r18, r18
 174:	33 1f       	adc	r19, r19
 176:	82 0f       	add	r24, r18
 178:	93 1f       	adc	r25, r19
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	84 52       	subi	r24, 0x24	; 36
 184:	9a 4f       	sbci	r25, 0xFA	; 250
 186:	9c 01       	movw	r18, r24
 188:	99 23       	and	r25, r25
 18a:	14 f4       	brge	.+4      	; 0x190 <forward+0x26>
 18c:	2f 5f       	subi	r18, 0xFF	; 255
 18e:	3f 4f       	sbci	r19, 0xFF	; 255
 190:	35 95       	asr	r19
 192:	27 95       	ror	r18
 194:	30 93 89 00 	sts	0x0089, r19
 198:	20 93 88 00 	sts	0x0088, r18
	TCNT3=0x00;
 19c:	10 92 95 00 	sts	0x0095, r1
 1a0:	10 92 94 00 	sts	0x0094, r1
 1a4:	08 95       	ret

000001a6 <__vector_18>:
}

//Timer0 interrupt processor. For stopping after no signal from SPI.
ISR (TIMER0_OVF_vect) 
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
	OCR1A =  1500/2;
 1b4:	8e ee       	ldi	r24, 0xEE	; 238
 1b6:	92 e0       	ldi	r25, 0x02	; 2
 1b8:	90 93 89 00 	sts	0x0089, r25
 1bc:	80 93 88 00 	sts	0x0088, r24
}
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <__vector_19>:

ISR (SPI_STC_vect)                  // SPI interrupts
{
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	0b b6       	in	r0, 0x3b	; 59
 1da:	0f 92       	push	r0
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31

	if (SPDR >= 0x80)
 1f4:	0e b4       	in	r0, 0x2e	; 46
 1f6:	07 fe       	sbrs	r0, 7
 1f8:	06 c0       	rjmp	.+12     	; 0x206 <__vector_19+0x38>
	{
		forward((SPDR-0x80));
 1fa:	8e b5       	in	r24, 0x2e	; 46
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	80 58       	subi	r24, 0x80	; 128
 200:	91 09       	sbc	r25, r1
 202:	b3 df       	rcall	.-154    	; 0x16a <forward>
 204:	04 c0       	rjmp	.+8      	; 0x20e <__vector_19+0x40>
	}
	else
	{
		turn((SPDR)-15);
 206:	8e b5       	in	r24, 0x2e	; 46
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0f 97       	sbiw	r24, 0x0f	; 15
 20c:	83 df       	rcall	.-250    	; 0x114 <turn>
	}
	
}
 20e:	ff 91       	pop	r31
 210:	ef 91       	pop	r30
 212:	bf 91       	pop	r27
 214:	af 91       	pop	r26
 216:	9f 91       	pop	r25
 218:	8f 91       	pop	r24
 21a:	7f 91       	pop	r23
 21c:	6f 91       	pop	r22
 21e:	5f 91       	pop	r21
 220:	4f 91       	pop	r20
 222:	3f 91       	pop	r19
 224:	2f 91       	pop	r18
 226:	0f 90       	pop	r0
 228:	0b be       	out	0x3b, r0	; 59
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <main>:

int main()
{	init_pwm();
 234:	3c df       	rcall	.-392    	; 0xae <init_pwm>
	//DDRD |= 0xFF;	
	DDRA |= 0xFF;
 236:	81 b1       	in	r24, 0x01	; 1
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	81 b9       	out	0x01, r24	; 1
	x=0;
 23c:	10 92 01 01 	sts	0x0101, r1
 240:	10 92 00 01 	sts	0x0100, r1
	Data[0]=0;
 244:	10 92 05 01 	sts	0x0105, r1
 248:	10 92 04 01 	sts	0x0104, r1
	SPI_SlaveInterruptInit();
 24c:	89 df       	rcall	.-238    	; 0x160 <SPI_SlaveInterruptInit>
	sei();	//Enable interrupts
 24e:	78 94       	sei
 250:	ff cf       	rjmp	.-2      	; 0x250 <main+0x1c>

00000252 <__divmodhi4>:
 252:	97 fb       	bst	r25, 7
 254:	07 2e       	mov	r0, r23
 256:	16 f4       	brtc	.+4      	; 0x25c <__divmodhi4+0xa>
 258:	00 94       	com	r0
 25a:	06 d0       	rcall	.+12     	; 0x268 <__divmodhi4_neg1>
 25c:	77 fd       	sbrc	r23, 7
 25e:	08 d0       	rcall	.+16     	; 0x270 <__divmodhi4_neg2>
 260:	0b d0       	rcall	.+22     	; 0x278 <__udivmodhi4>
 262:	07 fc       	sbrc	r0, 7
 264:	05 d0       	rcall	.+10     	; 0x270 <__divmodhi4_neg2>
 266:	3e f4       	brtc	.+14     	; 0x276 <__divmodhi4_exit>

00000268 <__divmodhi4_neg1>:
 268:	90 95       	com	r25
 26a:	81 95       	neg	r24
 26c:	9f 4f       	sbci	r25, 0xFF	; 255
 26e:	08 95       	ret

00000270 <__divmodhi4_neg2>:
 270:	70 95       	com	r23
 272:	61 95       	neg	r22
 274:	7f 4f       	sbci	r23, 0xFF	; 255

00000276 <__divmodhi4_exit>:
 276:	08 95       	ret

00000278 <__udivmodhi4>:
 278:	aa 1b       	sub	r26, r26
 27a:	bb 1b       	sub	r27, r27
 27c:	51 e1       	ldi	r21, 0x11	; 17
 27e:	07 c0       	rjmp	.+14     	; 0x28e <__udivmodhi4_ep>

00000280 <__udivmodhi4_loop>:
 280:	aa 1f       	adc	r26, r26
 282:	bb 1f       	adc	r27, r27
 284:	a6 17       	cp	r26, r22
 286:	b7 07       	cpc	r27, r23
 288:	10 f0       	brcs	.+4      	; 0x28e <__udivmodhi4_ep>
 28a:	a6 1b       	sub	r26, r22
 28c:	b7 0b       	sbc	r27, r23

0000028e <__udivmodhi4_ep>:
 28e:	88 1f       	adc	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	5a 95       	dec	r21
 294:	a9 f7       	brne	.-22     	; 0x280 <__udivmodhi4_loop>
 296:	80 95       	com	r24
 298:	90 95       	com	r25
 29a:	bc 01       	movw	r22, r24
 29c:	cd 01       	movw	r24, r26
 29e:	08 95       	ret

000002a0 <_exit>:
 2a0:	f8 94       	cli

000002a2 <__stop_program>:
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <__stop_program>
